<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.ruminaq</groupId>
    <artifactId>org.ruminaq.bundles</artifactId>
    <version>0.9.0-SNAPSHOT</version>
  </parent>

  <artifactId>org.ruminaq.gui.features</artifactId>
  <packaging>eclipse-plugin</packaging>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <executions>
          <execution>
            <?m2e ignore?>
            <phase>generate-resources</phase>
            <goals><goal>execute</goal></goals>
          </execution>
        </executions>
        <configuration>
          <properties>
            <property>
              <name>basedir</name><value>${basedir}</value>
            </property>
          </properties>
          <scripts>
            <script>
<![CDATA[
import static groovy.io.FileType.FILES

println "**********************************************"
println "[INFO] Icons : Generate dirty icons"
println basedir
def icons = new File(basedir + "/icons")
def icons_xcf = new File(basedir + "/icons_xcf")
if(!icons.exists()) icons.mkdir()
def processes = []
icons_xcf.eachFile(FILES) {	if(it.name.contains(".dirty."))           processes.add("""xcf2png ${it.getAbsolutePath()} -o ${icons.getName()}/${it.getName().replace(".xcf", ".png")} -A""".execute()) }
processes.each() { it.waitFor() }

icons.eachFile(FILES)     { if(it.name.startsWith("template.dirty.")) processes.add("""convert   -geometry x22   ${icons.getName()}/${it.getName()} ${icons.getName()}/${it.getName().replace(".dirty.", ".")}""".execute()) }
icons.eachFile(FILES)     {	if(it.name.contains(".dirty.")
                            && it.name.contains(".diagram."))         processes.add("""convert   -geometry x30   ${icons.getName()}/${it.getName()} ${icons.getName()}/diagram.${removeKeys(it.getName())}""".execute()) }
icons.eachFile(FILES)     {	if(it.name.contains(".dirty.")
                            && it.name.contains(".context."))         processes.add("""convert   -geometry x25   ${icons.getName()}/${it.getName()} ${icons.getName()}/context.${removeKeys(it.getName()).replace(".png", ".gif")}""".execute()) }
processes = []
icons.eachFile(FILES)     {	if(it.name.contains(".dirty.")
	                        && it.name.contains(".palette."))         processes.add("""convert   -geometry x15   ${icons.getName()}/${it.getName()} ${icons.getName()}/${it.getName().replace(".dirty.", ".dirty.tmp.")}""".execute()) }
processes.each() { it.waitFor() }
icons.eachFile(FILES)     {	if(it.name.contains(".dirty.tmp.")) {
							    if     (it.name.contains(".white."))  processes.add("""composite -gravity center ${icons.getName()}/${it.getName()} ${icons.getName()}/template.palette.white.png ${icons.getName()}/palette.${removeKeys(it.getName())}""".execute())
								else if(it.name.contains(".border.")) processes.add("""composite -gravity center ${icons.getName()}/${it.getName()} ${icons.getName()}/template.palette.border.png ${icons.getName()}/palette.${removeKeys(it.getName())}""".execute())
								else                                  processes.add("""convert   -geometry x22   ${icons.getName()}/${it.getName().replace(".tmp.", ".")} ${icons.getName()}/palette.${removeKeys(it.getName())}""".execute())
                            }
}
processes.each() { it.waitFor() }
println "[INFO] Icons : Delete dirty and templates icons"
icons.eachFile(FILES) {
	if(it.name.contains(".dirty."))     """rm ${it.getAbsolutePath()}""".execute()
	if(it.name.contains("template.")) """rm ${it.getAbsolutePath()}""".execute()
}

println "**********************************************"

def removeKeys(name) {
	name.replace(".dirty.",    ".")
		.replace(".diagram.",  ".")
		.replace(".context.",  ".")
		.replace(".palette.",  ".")
		.replace(".white.",    ".")
		.replace(".border.",   ".")
		.replace(".tmp.",      ".")
}
]]></script>
          </scripts>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
